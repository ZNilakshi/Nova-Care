MONGO_URI= mongodb+srv://nilakshilakshani4:HyG2sMupgcV9G1mQ@cluster0.kacpc.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
PORT=5000




import React, { useState, useEffect } from "react";
import "./AdminDashboard.css";
import axios from "axios";

const API_URL = "http://localhost:5000"; // Change this if backend is deployed

const AdminDashboard = () => {
  const [doctors, setDoctors] = useState([]);
  const [doctor, setDoctor] = useState({
    name: "",
    specialty: "",
    experience: "",
    degrees: "",
    languages: "",
    locations: "",
    description: "",
    fee: "",
    photo: null,
  });

  const [availability, setAvailability] = useState({
    doctorId: "",
    days: "",
    time: "",
    location: "",
    availableSlots: "",
  });

  const [editingDoctorId, setEditingDoctorId] = useState(null);
  const [ setEditingAvailabilityId] = useState(null);

  // Fetch doctors on component mount
  useEffect(() => {
    fetchDoctors();
  }, []);
  
  useEffect(() => {
    console.log("Doctors state updated:", doctors);
  }, [doctors]);
  

  const fetchDoctors = async () => {
    try {
      const res = await axios.get(`${API_URL}/doctors`);
      console.log("Fetched Doctors:", res.data); // Debugging output
      setDoctors(res.data);
    } catch (error) {
      console.error("Error fetching doctors:", error);
    }
  };
  

  const handleDoctorChange = (e) => {
    setDoctor({ ...doctor, [e.target.name]: e.target.value });
  };

  const handlePhotoChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setDoctor({ ...doctor, photo: URL.createObjectURL(file) });
    }
  };

  const handleDoctorSubmit = async (e) => {
    e.preventDefault();

    try {
      if (editingDoctorId) {
        await axios.put(`${API_URL}/doctors/${editingDoctorId}`, doctor);
      } else {
        await axios.post(`${API_URL}/doctors`, doctor);
      }
      setEditingDoctorId(null);
      fetchDoctors();
    } catch (error) {
      console.error("Error saving doctor:", error);
    }
    

    setDoctor({
      name: "",
      specialty: "",
      experience: "",
      degrees: "",
      languages: "",
      locations: "",
      description: "",
      fee: "",
      photo: null,
    });
    
  };

  const handleEditDoctor = (id) => {
    const selectedDoctor = doctors.find((doc) => doc._id === id);
    setDoctor(selectedDoctor);
    setEditingDoctorId(id);
  };

  const handleDeleteDoctor = async (id) => {
    try {
      await axios.delete(`${API_URL}/doctors/${id}`);
      fetchDoctors();
    } catch (error) {
      console.error("Error deleting doctor:", error);
    }
  };

  const handleAvailabilityChange = (e) => {
    setAvailability({ ...availability, [e.target.name]: e.target.value });
  };

  const handleAvailabilitySubmit = async (e) => {
    e.preventDefault();
    if (!availability.doctorId) {
      console.error("Select a doctor first");
      return;
    }

    try {
      await axios.post(`${API_URL}/doctors/${availability.doctorId}/availability`, availability);
      fetchDoctors();
      setAvailability({ doctorId: "", days: "", time: "", location: "", availableSlots: "" });
    } catch (error) {
      console.error("Error adding availability:", error);
    }
  };

  return (
    <div className="admin-dashboard">
      {/* Sidebar */}
      <aside className="sidebar">
        <h2>Admin Dashboard</h2>
        <ul>
          <li>Manage Doctors</li>
        </ul>
      </aside>

      {/* Main Content */}
      <main className="main-content">
        {/* Register/Edit Doctor */}
        <h2>{editingDoctorId ? "Edit Doctor" : "Register Doctor"}</h2>
        <form onSubmit={handleDoctorSubmit} className="form-container">
          {Object.keys(doctor).map((key) =>
            key !== "photo" ? (
              <div key={key}>
                <label>{key.charAt(0).toUpperCase() + key.slice(1)}</label>
                <input name={key} value={doctor[key]} onChange={handleDoctorChange} />
              </div>
            ) : null
          )}

          <div>
            <label>Photo</label>
            <input type="file" accept="image/*" onChange={handlePhotoChange} />
            {doctor.photo && <img src={doctor.photo} alt="Doctor" className="doctor-photo" />}
          </div>

          <button type="submit">{editingDoctorId ? "Update Doctor" : "Register Doctor"}</button>
        </form>

        {/* Add Availability */}
        <h2>Add Availability</h2>
        <form onSubmit={handleAvailabilitySubmit} className="form-container">
          <label>Doctor:</label>
          <select name="doctorId" onChange={handleAvailabilityChange} value={availability.doctorId}>
            <option value="">Select Doctor</option>
            {doctors.map((doc) => (
              <option key={doc._id} value={doc._id}>
                {doc.name}
              </option>
            ))}
          </select>

          <input name="days" placeholder="Days" onChange={handleAvailabilityChange} value={availability.days} />
          <input name="time" placeholder="Time" onChange={handleAvailabilityChange} value={availability.time} />
          <input name="location" placeholder="Location" onChange={handleAvailabilityChange} value={availability.location} />
          <input name="availableSlots" placeholder="Available Slots" onChange={handleAvailabilityChange} value={availability.availableSlots} />
          <button type="submit">Add Availability</button>
        </form>

        {/* Doctors List */}
        <h2>Doctors List</h2>
        {doctors.length === 0 ? <p>No doctors found.</p> : null}

        <div className="doctors-list">
          {doctors.map((doc) => (
            <div key={doc._id} className="doctor-card">
              <h3>{doc.name}</h3>
              <p><strong>Specialty:</strong> {doc.specialty}</p>
              <p><strong>Experience:</strong> {doc.experience} years</p>
              <p><strong>Degrees:</strong> {doc.degrees}</p>
              <p><strong>Languages:</strong> {doc.languages}</p>
              <p><strong>Location:</strong> {doc.locations}</p>
              <p><strong>Description:</strong> {doc.description}</p>
              <p><strong>Fee:</strong> ${doc.fee}</p>
              {doc.photo && <img src={doc.photo} alt={doc.name} className="doctor-photo" />}

              {/* Availability Section */}
              <h4>Availability:</h4>
              {doc.availability && doc.availability.length > 0 ? (
                doc.availability.map((slot, i) => (
                  <p key={i} className="availability-item">
                    {slot.days} | {slot.time} | {slot.location} | {slot.availableSlots} slots
                  </p>
                ))
              ) : (
                <p>No availability added</p>
              )}

              <div className="doctor-actions">
                <button onClick={() => handleEditDoctor(doc._id)} className="edit-btn">Edit Details</button>
                <button onClick={() => setEditingAvailabilityId(doc._id)} className="edit-btn">Edit Availability</button>
                <button onClick={() => handleDeleteDoctor(doc._id)} className="delete-btn">Delete</button>
              </div>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
};

export default AdminDashboard;


///
import React, { useState } from "react";
import "./AdminDashboard.css";

const AdminDashboard = () => {
  const [doctors, setDoctors] = useState([]);
  const [doctor, setDoctor] = useState({
    name: "",
    specialty: "",
    experience: "",
    degrees: "",
    languages: "",
    locations: "",
    description: "",
    fee: "",
    photo: null,
  });

  const [availability, setAvailability] = useState({
    doctorIndex: "",
    days: "",
    time: "",
    location: "",
    availableSlots: "",
  });

  const [editingIndex, setEditingIndex] = useState(null);

  const handleDoctorChange = (e) => {
    setDoctor({ ...doctor, [e.target.name]: e.target.value });
  };

  const handlePhotoChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setDoctor({ ...doctor, photo: URL.createObjectURL(file) });
    }
  };

  const handleDoctorSubmit = (e) => {
    e.preventDefault();
    if (editingIndex !== null) {
      const updatedDoctors = [...doctors];
      updatedDoctors[editingIndex] = { ...doctor, availability: updatedDoctors[editingIndex].availability || [] };
      setDoctors(updatedDoctors);
      setEditingIndex(null);
    } else {
      setDoctors([...doctors, { ...doctor, availability: [] }]);
    }

    setDoctor({
      name: "",
      specialty: "",
      experience: "",
      degrees: "",
      languages: "",
      locations: "",
      description: "",
      fee: "",
      photo: null,
    });
  };

  const handleEdit = (index) => {
    setDoctor(doctors[index]);
    setEditingIndex(index);
  };

  const handleDelete = (index) => {
    setDoctors(doctors.filter((_, i) => i !== index));
  };

  const handleAvailabilityChange = (e) => {
    setAvailability({ ...availability, [e.target.name]: e.target.value });
  };

  const handleAvailabilitySubmit = (e) => {
    e.preventDefault();
    if (availability.doctorIndex !== "") {
      const updatedDoctors = [...doctors];
      updatedDoctors[availability.doctorIndex].availability.push({
        days: availability.days,
        time: availability.time,
        location: availability.location,
        availableSlots: availability.availableSlots,
      });
      setDoctors(updatedDoctors);
      setAvailability({ doctorIndex: "", days: "", time: "", location: "", availableSlots: "" });
    }
  };

  return (
    <div className="admin-dashboard">
      {/* Sidebar */}
      <aside className="sidebar">
        <h2>Admin Dashboard</h2>
        <ul>
          <li>Manage Doctors</li>
        </ul>
      </aside>

      {/* Main Content */}
      <main className="main-content">
        {/* Register Doctor */}
        <h2>{editingIndex !== null ? "Edit Doctor" : "Register Doctor"}</h2>
        <form onSubmit={handleDoctorSubmit} className="form-container">
          {Object.keys(doctor).map((key) =>
            key !== "photo" ? (
              <div key={key}>
                <label>{key.charAt(0).toUpperCase() + key.slice(1)}</label>
                <input name={key} value={doctor[key]} onChange={handleDoctorChange} />
              </div>
            ) : null
          )}

          <div>
            <label>Photo</label>
            <input type="file" accept="image/*" onChange={handlePhotoChange} />
            {doctor.photo && <img src={doctor.photo} alt="Doctor" className="doctor-photo" />}
          </div>

          <button type="submit">{editingIndex !== null ? "Update Doctor" : "Register Doctor"}</button>
        </form>

        {/* Add Availability */}
        <h2>Add Availability</h2>
        <form onSubmit={handleAvailabilitySubmit} className="form-container">
          <label>Doctor:</label>
          <select name="doctorIndex" onChange={handleAvailabilityChange} value={availability.doctorIndex}>
            <option value="">Select Doctor</option>
            {doctors.map((doc, index) => (
              <option key={index} value={index}>
                {doc.name}
              </option>
            ))}
          </select>
          <input name="days" placeholder="Days" onChange={handleAvailabilityChange} value={availability.days} />
          <input name="time" placeholder="Time" onChange={handleAvailabilityChange} value={availability.time} />
          <input name="location" placeholder="Location" onChange={handleAvailabilityChange} value={availability.location} />
          <input name="availableSlots" placeholder="Available Slots" onChange={handleAvailabilityChange} value={availability.availableSlots} />
          <button type="submit">Add Availability</button>
        </form>

        {/* Doctors List */}
        <h2>Doctors List</h2>
        <div className="doctors-list">
          {doctors.map((doc, index) => (
            <div key={index} className="doctor-card">
              <h3>{doc.name}</h3>
              <p><strong>Specialty:</strong> {doc.specialty}</p>
              <p><strong>Experience:</strong> {doc.experience} years</p>
              <p><strong>Degrees:</strong> {doc.degrees}</p>
              <p><strong>Languages:</strong> {doc.languages}</p>
              <p><strong>Location:</strong> {doc.locations}</p>
              <p><strong>Description:</strong> {doc.description}</p>
              <p><strong>Fee:</strong> ${doc.fee}</p>
              {doc.photo && <img src={doc.photo} alt={doc.name} className="doctor-photo" />}

              {/* Availability Section */}
              <h4>Availability:</h4>
              {doc.availability.length > 0 ? (
                doc.availability.map((slot, i) => (
                  <p key={i} className="availability-item">
                    {slot.days} | {slot.time} | {slot.location} | {slot.availableSlots} slots
                  </p>
                ))
              ) : (
                <p>No availability added</p>
              )}

              <div className="doctor-actions">
                <button onClick={() => handleEdit(index)} className="edit-btn">Edit</button>
                <button onClick={() => handleDelete(index)} className="delete-btn">Delete</button>
              </div>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
};

export default AdminDashboard;
